<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.yunyou.modules.sys.mapper.UserMapper">

    <sql id="userColumns">
        a.id,
		a.company_id  AS "company.id",
		a.office_id   AS "office.id",
		a.login_name  AS "loginName",
		a.password,
		a.no,
		a.name,
		a.email,
		a.phone,
		a.mobile,
		a.login_ip,
		a.login_date,
		a.login_flag,
		a.photo,
		a.qrcode,
		a.sign,
		a.remarks,
		a.create_by   AS "createBy.id",
		a.create_date AS "createDate",
		a.update_by   AS "updateBy.id",
		a.update_date AS "updateDate",
		a.del_flag    AS "delFlag",
		C.code        AS "company.code",
		C.name        AS "company.name",
		o.code        AS "office.code",
		C.parent_id   AS "company.parent.id",
		C.parent_ids  AS "company.parentIds",
		ca.id         AS "company.area.id",
		ca.name       AS "company.area.name",
		ca.parent_id  AS "company.area.parent.id",
		ca.parent_ids AS "company.area.parentIds",
		o.name        AS "office.name",
		o.parent_id   AS "office.parent.id",
		o.parent_ids  AS "office.parentIds",
		oa.id         AS "office.area.id",
		oa.name       AS "office.area.name",
		oa.parent_id  AS "office.area.parent.id",
		oa.parent_ids AS "office.area.parentIds"
    </sql>

    <sql id="userJoins">
        LEFT JOIN sys_office c ON c.id = a.company_id
		LEFT JOIN sys_area ca ON ca.id = c.area_id
		LEFT JOIN sys_office o ON o.id = a.office_id
		LEFT JOIN sys_area oa ON oa.id = o.area_id
    </sql>

    <!-- 根据编号获得用户 -->
    <select id="get" resultType="com.yunyou.modules.sys.entity.User">
        SELECT
        <include refid="userColumns"/>
        FROM sys_user a
        <include refid="userJoins"/>
        WHERE a.id = #{id}
    </select>

    <!-- 根据登录名查询用户 -->
    <select id="getByLoginName" resultType="com.yunyou.modules.sys.entity.User" parameterType="com.yunyou.modules.sys.entity.User">
        SELECT
        <include refid="userColumns"/>
        FROM sys_user a
        <include refid="userJoins"/>
        WHERE a.del_flag = #{DEL_FLAG_NORMAL}
        AND a.login_name = #{loginName}
    </select>

    <!-- 分页查询用户信息 -->
    <select id="findList" resultType="com.yunyou.modules.sys.entity.User">
        SELECT
        <include refid="userColumns"/>
        FROM sys_user a
        <include refid="userJoins"/>
        <if test="role != null and role.id != null and role.id != ''">
            JOIN sys_user_role ur ON ur.user_id = a.id AND ur.role_id = #{role.id}
        </if>
        WHERE a.del_flag = #{DEL_FLAG_NORMAL}
        <!-- 如果不是超级管理员，则不显示超级管理员用户 -->
        <if test="!currentUser.admin">
            AND a.id != '1'
        </if>
        <if test="company != null and company.id != null and company.id != ''">
            AND (c.id = #{company.id} OR c.parent_ids LIKE CONCAT('%,', #{company.id}, ',%'))
        </if>
        <if test="office != null and office.id != null and office.id != ''">
            AND (o.id = #{office.id} OR o.parent_ids LIKE CONCAT('%,', #{office.id}, ',%'))
        </if>
        <if test="loginName != null and loginName != ''">
            AND a.login_name like CONCAT('%', #{loginName}, '%')
        </if>
        <if test="name != null and name != ''">
            AND a.name like CONCAT('%', #{name}, '%')
        </if>
        <if test="no != null and no != ''">
            AND a.no = #{no}
        </if>
        <!-- 数据范围过滤 -->
        ${dataScope}
        <choose>
            <when test="page !=null and page.orderBy != null and page.orderBy != ''">
                ORDER BY #{page.orderBy}
            </when>
            <otherwise>
                ORDER BY c.code, o.code, a.name
            </otherwise>
        </choose>
    </select>

    <!-- 根据OfficeId获取用户（树查询用户时用） -->
    <select id="findUserByOfficeId" resultType="com.yunyou.modules.sys.entity.User" useCache="true">
        SELECT a.id,
               a.name,
               a.login_name
        FROM sys_user a
        WHERE a.del_flag = #{DEL_FLAG_NORMAL}
          AND a.office_id = #{office.id}
        ORDER BY a.name
    </select>

    <!-- 查询全部用户 -->
    <select id="findAllList" resultType="com.yunyou.modules.sys.entity.User">
        SELECT
        <include refid="userColumns"/>
        FROM sys_user a
        <include refid="userJoins"/>
        WHERE a.del_flag = #{DEL_FLAG_NORMAL}
        ORDER BY c.code, o.code, a.name
    </select>

    <!-- 插入用户 -->
    <insert id="insert">
        INSERT INTO sys_user (
            id,
            company_id,
            office_id,
            login_name,
            password,
            no,
            name,
            email,
            phone,
            mobile,
            create_by,
            create_date,
            update_by,
            update_date,
            remarks,
            login_flag,
            photo,
            qrcode,
            sign,
            del_flag
        ) VALUES (
			#{id},
			#{company.id},
			#{office.id},
			#{loginName},
			#{password},
			#{no},
			#{name},
			#{email},
			#{phone},
			#{mobile},
			#{createBy.id},
			#{createDate},
			#{updateBy.id},
			#{updateDate},
			#{remarks},
			#{loginFlag},
			#{photo},
			#{qrCode},
			#{sign},
			#{delFlag}
		)
    </insert>

    <!-- 更新用户 -->
    <update id="update">
        UPDATE sys_user
        SET company_id  = #{company.id},
            office_id   = #{office.id},
            login_name  = #{loginName},
            password    = #{password},
            no          = #{no},
            name        = #{name},
            email       = #{email},
            phone       = #{phone},
            mobile      = #{mobile},
            update_by   = #{updateBy.id},
            update_date = #{updateDate},
            remarks     = #{remarks},
            login_flag  = #{loginFlag},
            photo       = #{photo},
            sign        = #{sign},
            qrcode      = #{qrCode}
        WHERE id = #{id}
    </update>

    <!-- 逻辑删除用户 -->
    <update id="deleteByLogic">
        UPDATE sys_user
        SET del_flag = #{DEL_FLAG_DELETE}
        WHERE id = #{id}
    </update>

    <!-- 物理删除用户 -->
    <delete id="delete">
        DELETE
        FROM sys_user
        WHERE id = #{id}
    </delete>

    <!-- 插入用户和角色关联表数据 -->
    <insert id="insertUserRole">
        INSERT INTO sys_user_role(user_id, role_id)
        <foreach collection="roleList" item="role" separator=" UNION ALL ">
            SELECT #{id}, #{role.id} ${dual}
        </foreach>
    </insert>

    <!-- 更新用户信息  -->
    <update id="updateUserInfo">
        UPDATE sys_user
        SET name        = #{name},
            email       = #{email},
            phone       = #{phone},
            mobile      = #{mobile},
            update_by   = #{updateBy.id},
            update_date = #{updateDate},
            remarks     = #{remarks},
            photo       = #{photo},
            qrcode      = #{qrCode},
            sign        = #{sign}
        WHERE id = #{id}
    </update>

    <!-- 更新用户密码 -->
    <update id="updatePasswordById">
        UPDATE sys_user
        SET password = #{password}
        WHERE id = #{id}
    </update>

    <!-- 更新登录信息，如登录IP、登录时间 -->
    <update id="updateLoginInfo">
        UPDATE sys_user
        SET login_ip   = #{loginIp},
            login_Date = #{loginDate}
        WHERE id = #{id}
    </update>

    <!-- 删除用户和角色关联表数据 -->
    <delete id="deleteUserRole">
        DELETE
        FROM sys_user_role
        WHERE user_id = #{id}
    </delete>

</mapper>